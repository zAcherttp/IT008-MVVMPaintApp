<UserControl x:Class="MVVMPaintApp.UserControls.ColorPaletteControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vm="clr-namespace:MVVMPaintApp.ViewModels"
             xmlns:uc="clr-namespace:MVVMPaintApp.UserControls"
             xmlns:conv="clr-namespace:MVVMPaintApp.Converters"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance vm:ColorPaletteViewModel}">

    <UserControl.Resources>
        <conv:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <conv:BrushConverter x:Key="BrushConverter"/>
        <conv:BooleanNegationConverter x:Key="BooleanNegationConverter"/>
        <Style x:Key="GradientButtonStyle" TargetType="Button">
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="Transparent" />
            <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="ContentBorder" Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}" MinWidth="{TemplateBinding FrameworkElement.MinWidth}" MinHeight="{TemplateBinding FrameworkElement.MinHeight}" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}">
                            <ContentPresenter Name="ContentPresenter" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" TextElement.Foreground="{TemplateBinding Control.Foreground}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                <Setter Value="{DynamicResource ButtonBackgroundPointerOver}" Property="Background" />
                                <Setter Value="{DynamicResource ControlElevationBorderBrush}" Property="BorderBrush" />
                                <Setter TargetName="ContentPresenter" Value="{DynamicResource ButtonForegroundPointerOver}" Property="TextElement.Foreground" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Value="{DynamicResource ButtonBackgroundDisabled}" Property="Background" />
                                <Setter Value="{DynamicResource ButtonBorderBrushDisabled}" Property="BorderBrush" />
                                <Setter TargetName="ContentPresenter" Value="{DynamicResource ButtonForegroundDisabled}" Property="TextElement.Foreground" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Value="{DynamicResource ButtonBackgroundPressed}" Property="Background" />
                                <Setter Value="{DynamicResource ButtonBorderBrushPressed}" Property="BorderBrush" />
                                <Setter TargetName="ContentPresenter" Value="{DynamicResource ButtonForegroundPressed}" Property="TextElement.Foreground" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ColorButtonStyle" TargetType="Button">
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="Transparent" />
            <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Border.CornerRadius" Value="10" />
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="ContentBorder" Width="{TemplateBinding FrameworkElement.Width}" Height="{TemplateBinding FrameworkElement.Height}" MinWidth="{TemplateBinding FrameworkElement.MinWidth}" MinHeight="{TemplateBinding FrameworkElement.MinHeight}" Padding="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding FrameworkElement.HorizontalAlignment}" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}">
                            <Grid>
                                <Ellipse Stroke="#6F6F6F" StrokeThickness="1" Width="14" Height="14"
                                Fill="#212121" 
                                Visibility="{Binding IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <Ellipse Fill="{Binding Color, Converter={StaticResource BrushConverter}}"  Width="14" Height="14"
                                Visibility="{Binding IsEmpty, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="UIElement.IsMouseOver" Value="True">
                                <Setter Value="{DynamicResource ButtonBackgroundPointerOver}" Property="Background" />
                                <Setter Value="{DynamicResource ControlElevationBorderBrush}" Property="BorderBrush" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Value="Transparent" Property="Background" />
                                <Setter Value="Transparent" Property="BorderBrush" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Value="{DynamicResource ButtonBackgroundPressed}" Property="Background" />
                                <Setter Value="{DynamicResource ButtonBorderBrushPressed}" Property="BorderBrush" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ActiveColorButtonStyle" TargetType="RadioButton">
            <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
            <Setter Property="Background" Value="{DynamicResource RadioButtonOuterEllipseCheckedStroke}" />
            <Setter Property="Foreground" Value="{DynamicResource RadioButtonForeground}" />
            <Setter Property="BorderBrush" Value="#00FFFFFF" />
            <Setter Property="Margin" Value="0" />
            <Setter Property="Padding" Value="{StaticResource RadioButtonPadding}" />
            <Setter Property="FrameworkElement.Cursor" Value="Hand" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="MinWidth" Value="120" />
            <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
            <Setter Property="Focusable" Value="True" />
            <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
            <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding FrameworkElement.VerticalAlignment}" Background="#00FFFFFF">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid Height="30" VerticalAlignment="Top">
                                <Ellipse Name="OuterEllipse" Fill="Transparent" UseLayoutRounding="False" Width="30" Height="30" StrokeThickness="{StaticResource RadioButtonStrokeThickness}" />
                                <Ellipse Name="CheckOuterEllipse" Fill="Transparent" Opacity="0" Stroke="Transparent" UseLayoutRounding="False" Width="24" Height="24" StrokeThickness="{StaticResource RadioButtonStrokeThickness}" />
                                <Ellipse Name="CheckGlyph" Fill="{DynamicResource RadioButtonCheckGlyphFill}" Opacity="0" Stroke="{DynamicResource CircleElevationBorderBrush}" UseLayoutRounding="False" Width="{StaticResource RadioButtonCheckGlyphSize}" Height="{StaticResource RadioButtonCheckGlyphSize}">
                                    <FrameworkElement.LayoutTransform>
                                        <ScaleTransform ScaleX="1.0" ScaleY="1.0" />
                                    </FrameworkElement.LayoutTransform>
                                </Ellipse>
                                <Ellipse Name="FillColor" Fill="{TemplateBinding Control.Background}" Stroke="{DynamicResource CircleElevationBorderBrush}" UseLayoutRounding="False" Width="24" Height="24"/>
                                <Border Name="PressedCheckGlyph" Width="4" Height="4" Background="{DynamicResource RadioButtonCheckGlyphFill}" BorderBrush="{DynamicResource CircleElevationBorderBrush}" CornerRadius="6" Opacity="0" UseLayoutRounding="False" />
                            </Grid>
                            <ContentPresenter Name="ContentPresenter" Grid.Column="1" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" TextElement.Foreground="{TemplateBinding Control.Foreground}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True" />
                                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                                    <Condition Property="IsEnabled" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="OuterEllipse" Property="UIElement.Opacity" Value="0.0" />
                            </MultiTrigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="True">
                                <Setter TargetName="OuterEllipse" Value="Transparent" Property="Shape.Fill" />
                                <Setter TargetName="OuterEllipse" Value="#61BAED" Property="Shape.Stroke" />
                            </Trigger>
                            <Trigger Property="FlowDirection" Value="RightToLeft">
                                <Setter Property="HorizontalAlignment" Value="Right" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="UIElement.IsMouseOver" Value="True" />
                                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                                    <Condition Property="IsEnabled" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseFillPointerOver}" Property="Shape.Fill" />
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseStrokePressed}" Property="Shape.Stroke" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="UIElement.IsMouseOver" Value="True" />
                                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                                    <Condition Property="IsEnabled" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseFillPointerOver}" Property="Shape.Fill" />
                                <Setter TargetName="CheckOuterEllipse" Value="{DynamicResource RadioButtonCheckOuterEllipseCheckedFillPointerOver}" Property="Shape.Fill" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsPressed" Value="True" />
                                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                                    <Condition Property="IsEnabled" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="OuterEllipse" Property="UIElement.Opacity" Value="1.0" />
                                <Setter TargetName="CheckOuterEllipse" Value="{DynamicResource RadioButtonCheckOuterEllipseCheckedFillPressed}" Property="Shape.Fill" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ToggleButton.IsChecked" Value="False" />
                                    <Condition Property="IsEnabled" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Value="{DynamicResource RadioButtonForegroundDisabled}" Property="Foreground" />
                                <Setter Value="{DynamicResource RadioButtonBackgroundDisabled}" Property="Background" />
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseFillDisabled}" Property="Shape.Fill" />
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseStrokeDisabled}" Property="Shape.Stroke" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="ToggleButton.IsChecked" Value="True" />
                                    <Condition Property="IsEnabled" Value="False" />
                                </MultiTrigger.Conditions>
                                <Setter Value="{DynamicResource RadioButtonForegroundDisabled}" Property="Foreground" />
                                <Setter Value="{DynamicResource RadioButtonBackgroundDisabled}" Property="Background" />
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseFillDisabled}" Property="Shape.Fill" />
                                <Setter TargetName="OuterEllipse" Value="{DynamicResource RadioButtonOuterEllipseCheckedStrokeDisabled}" Property="Shape.Stroke" />
                                <Setter TargetName="CheckGlyph" Property="UIElement.Opacity" Value="0.7" />
                                <Setter TargetName="CheckOuterEllipse" Property="UIElement.Opacity" Value="0.7" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <UserControl.DataContext>
        <vm:ColorPaletteViewModel/>
    </UserControl.DataContext>
    <Grid>
        <StackPanel>
            <Border x:Name="ColorPaletteControlBorder"
                    CornerRadius="10" Background="#212121"
                    Width="325" Height="80">
                <StackPanel Orientation="Horizontal">
                    <!-- Color Spectrum -->
                    <Button Width="50" Height="50" Margin="15,0,11,0" 
                            HorizontalAlignment="Center" VerticalAlignment="Center" 
                            Style="{StaticResource GradientButtonStyle}"
                            Command="{Binding ToggleColorPickerCommand}">
                        <Button.Content>
                            <Image Source="pack://application:,,,/Resources/ColorPaletteGradientButtonIcon.png" Width="32" Height="32"/>
                        </Button.Content>
                    </Button>

                    <Line Stroke="#CC6F6F6F" X1="0" Y1="0" X2="0" Y2="60" StrokeThickness="0.5" VerticalAlignment="Center"/>

                    <!-- Color List -->
                    <ItemsControl x:Name="ColorList" Margin="12,0,12,0" Width="174" Height="60" 
                                ItemsSource="{Binding ColorsList}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <UniformGrid Rows="3" Columns="9"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Button Width="20" Height="20"
                                    Style="{StaticResource ColorButtonStyle}"
                                    Command="{Binding DataContext.ColorLeftClickCommand, 
                                                RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                    CommandParameter="{Binding}"
                                    IsEnabled="{Binding IsEmpty, 
                                                Converter={StaticResource BooleanNegationConverter}}"
                                    MouseEnter="OnColorButtonMouseEnter"
                                    MouseLeave="OnColorButtonMouseLeave">               
                                    <Button.InputBindings>
                                        <MouseBinding MouseAction="RightClick" 
                                                    Command="{Binding DataContext.ColorRightClickCommand, 
                                                              RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                                    CommandParameter="{Binding}"/>
                                    </Button.InputBindings>
                                </Button>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <Line Stroke="#CC6F6F6F" X1="0" Y1="0" X2="0" Y2="60" StrokeThickness="0.5" VerticalAlignment="Center"/>

                    <!-- Active Color -->
                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center" Width="50">
                        <RadioButton x:Name="PrimaryColorRadioButton" 
                                   Margin="10,0,10,0" Height="30" Width="30"
                                   Style="{StaticResource ActiveColorButtonStyle}"
                                   Background="{Binding PrimaryColor, Converter={StaticResource BrushConverter}}"
                                   Checked="OnPrimaryColorChecked"/>
                        <RadioButton x:Name="SecondaryColorRadioButton"
                                   Margin="10,0,10,0" Height="30" Width="30"
                                   Style="{StaticResource ActiveColorButtonStyle}"
                                   Background="{Binding SecondaryColor, Converter={StaticResource BrushConverter}}"
                                   Checked="OnSecondaryColorChecked"/>
                    </StackPanel>
                </StackPanel>
            </Border>
        </StackPanel>

        <Popup IsOpen="{Binding IsColorPickerOpen}"
               PlacementTarget="{Binding ElementName=ColorPaletteControlBorder}" 
               Placement="Top" StaysOpen="False" AllowsTransparency="True"
               PopupAnimation="Fade">
            <Border Background="#09FFFFFF" BorderBrush="#00FFFFFF" BorderThickness="1" 
                    CornerRadius="5" Padding="10" Width="610">
                <StackPanel>
                    <uc:ColorPickerControl SelectedColor="{Binding Path=DataContext.ColorPickerColor, 
                                                RelativeSource={RelativeSource FindAncestor, 
                                                AncestorType={x:Type uc:ColorPaletteControl}},
                                                Mode=TwoWay}" x:Name="ColorPicker" Margin="0,0,0,-30" />
                    <Button HorizontalAlignment="Right" Content="Add Color" Command="{Binding AddColorCommand}"/>
                </StackPanel>
            </Border>
        </Popup>
    </Grid>
</UserControl>